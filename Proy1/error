ClienteGrafo.java:15: error: cannot find symbol
 	public static UndirectedGraph<V,E> ugraph; // Se utilza para implementar el grafo no dirigido
 	                              ^
  symbol:   class V
  location: class ClienteGrafo
ClienteGrafo.java:15: error: cannot find symbol
 	public static UndirectedGraph<V,E> ugraph; // Se utilza para implementar el grafo no dirigido
 	                                ^
  symbol:   class E
  location: class ClienteGrafo
ClienteGrafo.java:16: error: cannot find symbol
  	public static DirectedGraph<V,E> dgraph;  // Se utilza para implementar el digrafo
  	                            ^
  symbol:   class V
  location: class ClienteGrafo
ClienteGrafo.java:16: error: cannot find symbol
  	public static DirectedGraph<V,E> dgraph;  // Se utilza para implementar el digrafo
  	                              ^
  symbol:   class E
  location: class ClienteGrafo
ClienteGrafo.java:18: error: cannot find symbol
  	private static Transformer<V> transV; // Parseador que nos permitira agregar datos genericos de vertices
  	                           ^
  symbol:   class V
  location: class ClienteGrafo
ClienteGrafo.java:19: error: cannot find symbol
  	private static Transformer<E> transE; // Parseador que nos permitira agregar datos genericos de lados
  	                           ^
  symbol:   class E
  location: class ClienteGrafo
ClienteGrafo.java:427: error: cannot find symbol
	    ArrayList<Node<V,E>> vertices;
	                   ^
  symbol:   class V
  location: class ClienteGrafo
ClienteGrafo.java:427: error: cannot find symbol
	    ArrayList<Node<V,E>> vertices;
	                     ^
  symbol:   class E
  location: class ClienteGrafo
ClienteGrafo.java:447: error: cannot find symbol
	    ArrayList<Node<V,E>> lados;
	                   ^
  symbol:   class V
  location: class ClienteGrafo
ClienteGrafo.java:447: error: cannot find symbol
	    ArrayList<Node<V,E>> lados;
	                     ^
  symbol:   class E
  location: class ClienteGrafo
ClienteGrafo.java:472: error: cannot find symbol
	    ArrayList<Node<V,E> > adj;
	                   ^
  symbol:   class V
  location: class ClienteGrafo
ClienteGrafo.java:472: error: cannot find symbol
	    ArrayList<Node<V,E> > adj;
	                     ^
  symbol:   class E
  location: class ClienteGrafo
ClienteGrafo.java:497: error: cannot find symbol
	    ArrayList<Edge<V,E>> inc;
	                   ^
  symbol:   class V
  location: class ClienteGrafo
ClienteGrafo.java:497: error: cannot find symbol
	    ArrayList<Edge<V,E>> inc;
	                     ^
  symbol:   class E
  location: class ClienteGrafo
UndirectedGraph.java:11: error: UndirectedGraph is not abstract and does not override abstract method edgeList(String) in Graph
public class UndirectedGraph<V,E> implements Graph{
       ^
UndirectedGraph.java:69: error: incompatible types: BooleanTransformer cannot be converted to Transformer<V>
			this.transV = new BooleanTransformer();
			              ^
  where V is a type-variable:
    V extends Object declared in class UndirectedGraph
UndirectedGraph.java:70: error: incompatible types: BooleanTransformer cannot be converted to Transformer<E>
			this.transE = new BooleanTransformer();
			              ^
  where E is a type-variable:
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:72: error: incompatible types: BooleanTransformer cannot be converted to Transformer<V>
			this.transV = new BooleanTransformer();
			              ^
  where V is a type-variable:
    V extends Object declared in class UndirectedGraph
UndirectedGraph.java:73: error: incompatible types: DoubleTransformer cannot be converted to Transformer<E>
			this.transE = new DoubleTransformer();
			              ^
  where E is a type-variable:
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:75: error: incompatible types: BooleanTransformer cannot be converted to Transformer<V>
			this.transV = new BooleanTransformer();
			              ^
  where V is a type-variable:
    V extends Object declared in class UndirectedGraph
UndirectedGraph.java:76: error: incompatible types: StringTransformer cannot be converted to Transformer<E>
			this.transE = new StringTransformer();
			              ^
  where E is a type-variable:
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:78: error: incompatible types: DoubleTransformer cannot be converted to Transformer<V>
			this.transV = new DoubleTransformer();
			              ^
  where V is a type-variable:
    V extends Object declared in class UndirectedGraph
UndirectedGraph.java:79: error: incompatible types: BooleanTransformer cannot be converted to Transformer<E>
			this.transE = new BooleanTransformer();
			              ^
  where E is a type-variable:
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:81: error: incompatible types: DoubleTransformer cannot be converted to Transformer<V>
			this.transV = new DoubleTransformer();
			              ^
  where V is a type-variable:
    V extends Object declared in class UndirectedGraph
UndirectedGraph.java:82: error: incompatible types: DoubleTransformer cannot be converted to Transformer<E>
			this.transE = new DoubleTransformer();
			              ^
  where E is a type-variable:
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:84: error: incompatible types: DoubleTransformer cannot be converted to Transformer<V>
			this.transV = new DoubleTransformer();
			              ^
  where V is a type-variable:
    V extends Object declared in class UndirectedGraph
UndirectedGraph.java:85: error: incompatible types: StringTransformer cannot be converted to Transformer<E>
			this.transE = new StringTransformer();
			              ^
  where E is a type-variable:
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:87: error: incompatible types: StringTransformer cannot be converted to Transformer<V>
			this.transV = new StringTransformer();
			              ^
  where V is a type-variable:
    V extends Object declared in class UndirectedGraph
UndirectedGraph.java:88: error: incompatible types: BooleanTransformer cannot be converted to Transformer<E>
			this.transE = new BooleanTransformer();
			              ^
  where E is a type-variable:
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:90: error: incompatible types: StringTransformer cannot be converted to Transformer<V>
			this.transV = new StringTransformer();
			              ^
  where V is a type-variable:
    V extends Object declared in class UndirectedGraph
UndirectedGraph.java:91: error: incompatible types: DoubleTransformer cannot be converted to Transformer<E>
			this.transE = new DoubleTransformer();
			              ^
  where E is a type-variable:
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:93: error: incompatible types: StringTransformer cannot be converted to Transformer<V>
			this.transV = new StringTransformer();
			              ^
  where V is a type-variable:
    V extends Object declared in class UndirectedGraph
UndirectedGraph.java:94: error: incompatible types: StringTransformer cannot be converted to Transformer<E>
			this.transE = new StringTransformer();
			              ^
  where E is a type-variable:
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:145: error: name clash: addNode(Node<V#1,E#1>) in UndirectedGraph and addNode(Node<V#2,E#2>) in Graph have the same erasure, yet neither overrides the other
	public boolean addNode(Node<V,E> node){
	               ^
  where V#1,E#1,V#2,E#2 are type-variables:
    V#1 extends Object declared in class UndirectedGraph
    E#1 extends Object declared in class UndirectedGraph
    V#2 extends Object declared in interface Graph
    E#2 extends Object declared in interface Graph
UndirectedGraph.java:167: error: name clash: addNode(String,V#1,double) in UndirectedGraph and addNode(String,V#2,double) in Graph have the same erasure, yet neither overrides the other
	public boolean addNode(String id, V data, double weight){
	               ^
  where V#1,V#2 are type-variables:
    V#1 extends Object declared in class UndirectedGraph
    V#2 extends Object declared in interface Graph
UndirectedGraph.java:233: error: incompatible types: Object cannot be converted to Edge<V,E>
				Edge<V,E> e = toRemove.pop();
				                          ^
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:245: error: cannot find symbol
					this.namesToEdges.remove(e.getId());
					                         ^
  symbol:   variable e
  location: class UndirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:259: error: incompatible types: List<Node<V,E>> cannot be converted to ArrayList<Node<V,E>>
		return list;
		       ^
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:267: error: incompatible types: List<Edge<V,E>> cannot be converted to ArrayList<Edge<V,E>>
		return list;
		       ^
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:285: error: cannot find symbol
		List<Node<V,E> > list = new ArrayList<Node<V,E> >(node.outegree);
		                                                      ^
  symbol:   variable outegree
  location: variable node of type Node<V,E>
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:288: error: incompatible types: List<Node<V,E>> cannot be converted to ArrayList<Node<V,E>>
		return list;
		       ^
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:296: error: incompatible types: List<Edge<V,E>> cannot be converted to ArrayList<Edge<V,E>>
		return node.outEdges;
		           ^
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:302: error: cannot find symbol
		newGraph.numOfArcs = this.numOfArcs;
		        ^
  symbol:   variable numOfArcs
  location: variable newGraph of type Graph
UndirectedGraph.java:302: error: cannot find symbol
		newGraph.numOfArcs = this.numOfArcs;
		                         ^
  symbol: variable numOfArcs
UndirectedGraph.java:303: error: cannot find symbol
		newGraph.numOfNodes = this.numOfNodes;
		        ^
  symbol:   variable numOfNodes
  location: variable newGraph of type Graph
UndirectedGraph.java:304: error: cannot find symbol
		newGraph.setOfNodes = (HashSet)this.setOfNodes.clone();
		        ^
  symbol:   variable setOfNodes
  location: variable newGraph of type Graph
UndirectedGraph.java:304: error: cannot find symbol
		newGraph.setOfNodes = (HashSet)this.setOfNodes.clone();
		                                   ^
  symbol: variable setOfNodes
UndirectedGraph.java:305: error: cannot find symbol
		newGraph.namesToNodes = (HashMap)this.namesToNodes.clone();
		        ^
  symbol:   variable namesToNodes
  location: variable newGraph of type Graph
UndirectedGraph.java:305: error: cannot find symbol
		newGraph.namesToNodes = (HashMap)this.namesToNodes.clone();
		                                                  ^
  symbol:   method clone()
  location: variable namesToNodes of type Map<String,Node<V,E>>
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:306: error: cannot find symbol
		newGraph.setOfArcs = (HashSet)this.setOfArcs.clone();
		        ^
  symbol:   variable setOfArcs
  location: variable newGraph of type Graph
UndirectedGraph.java:306: error: cannot find symbol
		newGraph.setOfArcs = (HashSet)this.setOfArcs.clone();
		                                  ^
  symbol: variable setOfArcs
UndirectedGraph.java:307: error: cannot find symbol
		newGraph.namesToArcs = (HashMap)this.namesToArcs.clone();
		        ^
  symbol:   variable namesToArcs
  location: variable newGraph of type Graph
UndirectedGraph.java:307: error: cannot find symbol
		newGraph.namesToArcs = (HashMap)this.namesToArcs.clone();
		                                    ^
  symbol: variable namesToArcs
UndirectedGraph.java:308: error: incompatible types: Graph cannot be converted to UndirectedGraph<V,E>
		return newGraph;
		       ^
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:321: error: cannot find symbol
		for(Edges<E> edge : this.edgeSet){
		    ^
  symbol:   class Edges
  location: class UndirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:336: error: incompatible types: Edge<V,E> cannot be converted to Node<V,E>
		namesToNodes.put(id,edge);
		                    ^
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:353: error: no suitable method found for isEdge(no arguments)
		if(nodeA == null || nodeB == null || isEdge())
		                                     ^
    method UndirectedGraph.isEdge(String) is not applicable
      (actual and formal argument lists differ in length)
    method UndirectedGraph.isEdge(String,String) is not applicable
      (actual and formal argument lists differ in length)
UndirectedGraph.java:358: error: incompatible types: Edge<V,E> cannot be converted to Node<V,E>
		namesToNodes.put(id,edge);
		                    ^
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
UndirectedGraph.java:378: error: cannot find symbol
		edgeSet.remove(e);
		               ^
  symbol:   variable e
  location: class UndirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class UndirectedGraph
    E extends Object declared in class UndirectedGraph
DirectedGraph.java:8: error: DirectedGraph is not abstract and does not override abstract method edgeList(String) in Graph
public class DirectedGraph<V,E> implements Graph{
       ^
DirectedGraph.java:22: error: cannot find symbol
		this.namesToArc = new HashMap<>();
		    ^
  symbol: variable namesToArc
DirectedGraph.java:24: error: cannot find symbol
		this.nodeArc = new HashSet<>();
		    ^
  symbol: variable nodeArc
DirectedGraph.java:59: error: cannot find symbol
		if(vType == "B" && eType =="B"){
		   ^
  symbol:   variable vType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:59: error: cannot find symbol
		if(vType == "B" && eType =="B"){
		                   ^
  symbol:   variable eType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:62: error: cannot find symbol
		}else if(vType == "B" && eType =="D"){
		         ^
  symbol:   variable vType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:62: error: cannot find symbol
		}else if(vType == "B" && eType =="D"){
		                         ^
  symbol:   variable eType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:65: error: cannot find symbol
		}else if(vType == "B" && eType =="S"){
		         ^
  symbol:   variable vType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:65: error: cannot find symbol
		}else if(vType == "B" && eType =="S"){
		                         ^
  symbol:   variable eType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:68: error: cannot find symbol
		}else if(vType == "D" && eType =="B"){
		         ^
  symbol:   variable vType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:68: error: cannot find symbol
		}else if(vType == "D" && eType =="B"){
		                         ^
  symbol:   variable eType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:71: error: cannot find symbol
		}else if(vType == "D" && eType =="D"){
		         ^
  symbol:   variable vType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:71: error: cannot find symbol
		}else if(vType == "D" && eType =="D"){
		                         ^
  symbol:   variable eType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:74: error: cannot find symbol
		}else if(vType == "D" && eType =="S"){
		         ^
  symbol:   variable vType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:74: error: cannot find symbol
		}else if(vType == "D" && eType =="S"){
		                         ^
  symbol:   variable eType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:77: error: cannot find symbol
		}else if(vType == "S" && eType =="B"){
		         ^
  symbol:   variable vType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:77: error: cannot find symbol
		}else if(vType == "S" && eType =="B"){
		                         ^
  symbol:   variable eType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:80: error: cannot find symbol
		}else if(vType == "S" && eType =="D"){
		         ^
  symbol:   variable vType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:80: error: cannot find symbol
		}else if(vType == "S" && eType =="D"){
		                         ^
  symbol:   variable eType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:83: error: cannot find symbol
		}else if(vType == "S" && eType =="S"){
		         ^
  symbol:   variable vType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:83: error: cannot find symbol
		}else if(vType == "S" && eType =="S"){
		                         ^
  symbol:   variable eType
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:88: error: cannot find symbol
		for(int i=0;i<n;i++){
		              ^
  symbol:   variable n
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:89: error: cannot find symbol
			line = read.readLine();
			^
  symbol:   variable line
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:90: error: cannot find symbol
			line = line.trim();
			^
  symbol:   variable line
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:90: error: cannot find symbol
			line = line.trim();
			       ^
  symbol:   variable line
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:91: error: cannot find symbol
			String[] node = line.split(" ");
			                ^
  symbol:   variable line
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:92: error: incompatible types: Object cannot be converted to V
			boolean result = this.addNode(node[0], this.transV.Transform(node[1]),
			                                                            ^
  where V is a type-variable:
    V extends Object declared in class DirectedGraph
DirectedGraph.java:99: error: cannot find symbol
		for(int i=0; i<m; i++){
		               ^
  symbol:   variable m
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:100: error: cannot find symbol
			line = read.readLine();
			^
  symbol:   variable line
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:101: error: cannot find symbol
			line = line.trim();
			^
  symbol:   variable line
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:101: error: cannot find symbol
			line = line.trim();
			       ^
  symbol:   variable line
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:102: error: cannot find symbol
			String[] edge = line.split(" ");
			                ^
  symbol:   variable line
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:103: error: cannot find symbol
			result = this.addEdge(edge[0], this.transE.Transform(edge[1]),
			^
  symbol:   variable result
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:103: error: cannot find symbol
			result = this.addEdge(edge[0], this.transE.Transform(edge[1]),
			             ^
  symbol: method addEdge(String,Object,double,String,String)
DirectedGraph.java:105: error: cannot find symbol
			 if(!result){
			     ^
  symbol:   variable result
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:120: error: name clash: addNode(Node<V#1,E#1>) in DirectedGraph and addNode(Node<V#2,E#2>) in Graph have the same erasure, yet neither overrides the other
	public boolean addNode(Node<V,E> node){
	               ^
  where V#1,E#1,V#2,E#2 are type-variables:
    V#1 extends Object declared in class DirectedGraph
    E#1 extends Object declared in class DirectedGraph
    V#2 extends Object declared in interface Graph
    E#2 extends Object declared in interface Graph
DirectedGraph.java:133: error: name clash: addNode(String,V#1,double) in DirectedGraph and addNode(String,V#2,double) in Graph have the same erasure, yet neither overrides the other
	public boolean addNode(String id, V data, double weight){
	               ^
  where V#1,V#2 are type-variables:
    V#1 extends Object declared in class DirectedGraph
    V#2 extends Object declared in interface Graph
DirectedGraph.java:168: error: cannot find symbol
		Node<V,E> nodeU = getNode(id); 
		                          ^
  symbol:   variable id
  location: class DirectedGraph<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:169: error: incompatible types: Edge<V,E> cannot be converted to Arc<V,E>
		for( Arc<V,E> arc: nodeU.outEdges ){
		                        ^
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:194: error: incompatible types: Edge<V,E> cannot be converted to Arc<V,E>
			for(Arc<V,E> arc : nodeV.outEdges)
			                        ^
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
DirectedGraph.java:196: error: cannot find symbol
					arc.push(arc);
					   ^
  symbol:   method push(Arc<V,E>)
  location: variable arc of type Arc<V,E>
  where V,E are type-variables:
    V extends Object declared in class DirectedGraph
    E extends Object declared in class DirectedGraph
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
100 errors
